#######################################################################
# Resources to get VPC and Subnets
#######################################################################
resource "aws_vpc" "AND-VPC" {
  cidr_block       = "172.31.0.0/16"
  enable_dns_hostnames = true

  tags {
    Name = "AND-VPC"
  }
}

resource "aws_subnet" "public_us_east_1e" {
  vpc_id     = "${aws_vpc.AND-VPC.id}"
  cidr_block = "172.31.48.0/20"
  availability_zone = "us-east-1e"

  tags {
    Name = "Public Subnet us-east-1e"
  }
}

resource "aws_subnet" "public_us_east_1c" {
  vpc_id     = "${aws_vpc.AND-VPC.id}"
  cidr_block = "172.31.32.0/20"
  availability_zone = "us-east-1c"

  tags {
    Name = "Public Subnet us-east-1c"
  }
}


resource "aws_internet_gateway" "AND-VPC_igw" {
  vpc_id = "${aws_vpc.my_vpc.id}"

  tags {
    Name = "My VPC - Internet Gateway"
  }
}

resource "aws_route_table" "AND-VPC_public" {
    vpc_id = "${aws_vpc.my_vpc.id}"

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.my_vpc_igw.id}"
    }

    tags {
        Name = "Public Subnets Route Table for My VPC"
    }
}

resource "aws_route_table_association" "AND-VPC_us_east_1e_public" {
    subnet_id = "${aws_subnet.public_us_east_1e.id}"
    route_table_id = "${aws_route_table.AND-VPC_public.id}"
}

resource "aws_route_table_association" "AND-VPC_us_east_1c_public" {
    subnet_id = "${aws_subnet.public_us_east_1c.id}"
    route_table_id = "${aws_route_table.AND-VPC_public.id}"
}
############################################################################################################
#Resoures to describe Security Group for our web-servers, which will allow HTTP connections to our instances
############################################################################################################
resource "aws_security_group" "allow_http" {
  name        = "allow_http"
  description = "Allow HTTP inbound connections"
  vpc_id = "${aws_vpc.AND-VPC.id}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
tags {
    Name = "Allow HTTP Security Group"
  }
}
##############################################################################################################
#Resources which contains all instance settings to apply to each new launched by Auto Scaling Group instance
##############################################################################################################

resource "aws_launch_configuration" "web" {
  name_prefix = "web-"

  image_id = "ami-26ebbc5c" # Redat linRHEL-7.4_HVM-20180103-x86_64-2 (HVM)
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.allow_http.id}"]
  associate_public_ip_address = true

  lifecycle {
    create_before_destroy = true
  }
}

#################################################################################################################
#Resources to create Elastic Load Balancer in front of our EC2 instances
#################################################################################################################
resource "aws_security_group" "elb_http_AND" {
  name        = "elb_http_AND"
  description = "Allow HTTP traffic to instances through Elastic Load Balancer"
  vpc_id = "${aws_vpc.AND-VPC.id}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "Allow HTTP through ELB Security Group"
  }
}

resource "aws_elb" "AND_web_elb" {
  name = "AND_web-elb"
  security_groups = [
    "${aws_security_group.AND_elb_http.id}"
  ]
  subnets = [
    "${aws_subnet.public_us_east_1e.id}",
    "${aws_subnet.public_us_east_1c.id}"
  ]
  cross_zone_load_balancing   = true
  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    interval = 30
    target = "HTTP:80/"
  }
  listener {
    lb_port = 80
    lb_protocol = "http"
    instance_port = "80"
    instance_protocol = "http"
  }
}
#################################################################################################################
#Resources to create autoscaling group by attaching web load baancer
#################################################################################################################
resource "aws_autoscaling_group" "AND-web" {
  name = "${aws_launch_configuration.AND-web.name}-asg"

  min_size             = 1
  desired_capacity     = 2
  max_size             = 2

  health_check_type    = "ELB"
  load_balancers= [
    "${aws_elb.AND_web_elb.id}"
  ]

  launch_configuration = "${aws_launch_configuration.AND-web.name}"
  availability_zones = ["us-east-1e", "us-east-1c"]

  enabled_metrics = [
    "GroupMinSize",
    "GroupMaxSize",
    "GroupDesiredCapacity",
    "GroupInServiceInstances",
    "GroupTotalInstances"
  ]

  vpc_zone_identifier  = [
    "${aws_subnet.public_us_east_1e.*.id}"
    "${aws_subnet.public_us_east_1c.*.id}"
  ]

  # Required to redeploy without an outage.
  lifecycle {
    create_before_destroy = true
  }
#########################################################################################################################
